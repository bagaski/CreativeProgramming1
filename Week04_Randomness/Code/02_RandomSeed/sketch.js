
/*
RANDOM SEED
Jeff Thompson | 2017/20 | jeffreythompson.org

Software-based random number generators are actually 
"pseudo-random": they're generated by deterministic
mathematical processes that appear random but are
actually totally predictable if you know the algorithm.
These generators have varying levels of randomness,
but aren't generating "true" random numbers. 

A common algorithm for creating random numbers in code is 
called Linear Congruential Generator:
https://en.wikipedia.org/wiki/Linear_congruential_generator

You can also see how this is done in the p5.js source code,
a great way to better understand how your tools work!
https://github.com/processing/p5.js/blob/
b15ca7c7ac8ba95ccb0123cf74fc163040090e1b/src/math/random.js#L10

One feature of most of these algorithms is a "seed" number,
one that kicks off the chain of random numbers. Normally, the
seed is set to the current time in milliseconds, providing
the appearance of random values every time the program runs.
But we can also set the value manually using the randomSeed()
command. 

WHY USE RANDOM SEED?
+ If we want the same results every time your sketch is run
  (ex: to re-create a sketch from a set of variables to render
  at high resolution)
+ To let us make the randomness interactive (see below)

*/


function setup() {
	createCanvas(400, 400);
}


function draw() {
	background(100);

	// if we set the random seed every frame, it 
	// will always generate the same random numbers
	// (and the circles will stay in the same location, 
	// instead of bouncing all over the place)
	randomSeed(0);

	// try un-commenting these lines and see what happens!
	// randomSeed(mouseX);
	// console.log(mouseX);

	// using your mouse, you can find a seed that creates
	// an image you like, then use that "hard-coded" into
	// randomSeed() so you get that result every time!

	// draw 30 randomly-placed circles
	fill(255);
	noStroke();
	for (let i=0; i<30; i++) {
		let x = random(0, width);
		let y = random(0, height);
		circle(x,y, 50);
	}
}

